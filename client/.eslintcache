[{"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/index.tsx":"1","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/reportWebVitals.ts":"2","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/App.tsx":"3","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/pages/main.tsx":"4","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/components/Dialog/index.tsx":"5","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/state.ts":"6","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/pages/room.tsx":"7","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/img/NotVotedIcon.tsx":"8","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/img/VotedIcon.tsx":"9","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/utilities.tsx":"10"},{"size":756,"mtime":1608667001830,"results":"11","hashOfConfig":"12"},{"size":416,"mtime":1608558514619,"results":"13","hashOfConfig":"12"},{"size":4063,"mtime":1608825163883,"results":"14","hashOfConfig":"12"},{"size":11905,"mtime":1608667001929,"results":"15","hashOfConfig":"12"},{"size":656,"mtime":1608667001818,"results":"16","hashOfConfig":"12"},{"size":1024,"mtime":1608824305758,"results":"17","hashOfConfig":"12"},{"size":9666,"mtime":1608826254766,"results":"18","hashOfConfig":"12"},{"size":1357,"mtime":1608817338864,"results":"19","hashOfConfig":"12"},{"size":919,"mtime":1608669748950,"results":"20","hashOfConfig":"12"},{"size":279,"mtime":1608670860316,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qimc3g",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/index.tsx",[],["46","47"],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/reportWebVitals.ts",[],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/App.tsx",[],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/pages/main.tsx",["48"],"import { useEffect, useState } from \"react\"\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n} from \"@material-ui/core\"\nimport Dialog from \"../components/Dialog\"\nimport GithubLogo from \"../img/github.png\"\nimport { SocketState, UserState } from \"../state\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\n\nconst Main = () => {\n  const [createRoomDialog, setCreateRoomDialog] = useState<boolean>(false)\n  const [joinRoomDialog, setJoinRoomDialog] = useState<boolean>(false)\n  const [user, setUser] = useRecoilState(UserState)\n  const socket = useRecoilValue(SocketState)\n\n  const handleClose = () => {\n    setCreateRoomDialog(false)\n    setJoinRoomDialog(false)\n  }\n\n  const createRoom = () => {\n    socket.emit(\"create-room\", user)\n  }\n\n  const joinRoom = () => {\n    socket.emit(\"join-room\", user)\n  }\n\n  return (\n    <>\n      <header>\n        <div id=\"logo\">\n          <svg width=\"58.642\" height=\"50\" viewBox=\"0 0 58.642 50\">\n            <defs>\n              <clipPath id=\"clipPath\">\n                <ellipse\n                  id=\"Ellipse_11\"\n                  data-name=\"Ellipse 11\"\n                  cx=\"6.558\"\n                  cy=\"3.445\"\n                  rx=\"6.558\"\n                  ry=\"3.445\"\n                />\n              </clipPath>\n            </defs>\n            <g\n              id=\"Group_29\"\n              data-name=\"Group 29\"\n              transform=\"translate(-868.179 -82.716)\"\n            >\n              <g\n                id=\"Group_28\"\n                data-name=\"Group 28\"\n                transform=\"matrix(0.966, -0.259, 0.259, 0.966, 868.179, 90.268)\"\n              >\n                <g\n                  id=\"Rectangle_4\"\n                  data-name=\"Rectangle 4\"\n                  transform=\"translate(0 0)\"\n                  fill=\"#fff\"\n                  stroke=\"#000\"\n                  strokeWidth=\"2\"\n                >\n                  <rect width=\"29.182\" height=\"43.773\" rx=\"5\" stroke=\"none\" />\n                  <rect\n                    x=\"1\"\n                    y=\"1\"\n                    width=\"27.182\"\n                    height=\"41.773\"\n                    rx=\"4\"\n                    fill=\"none\"\n                  />\n                </g>\n                <g\n                  id=\"Group_25\"\n                  data-name=\"Group 25\"\n                  transform=\"translate(4.947 12.034)\"\n                >\n                  <g\n                    id=\"Group_24\"\n                    data-name=\"Group 24\"\n                    transform=\"translate(0 0)\"\n                  >\n                    <path\n                      id=\"Path_30\"\n                      data-name=\"Path 30\"\n                      d=\"M7.778,0C3.889,0,0,1.473,0,4.415,0,7.693,1.538,13.5,7.778,13.5s7.778-5.8,7.778-9.083C15.556,1.473,11.667,0,7.778,0Z\"\n                      transform=\"translate(0 6.536)\"\n                      fill=\"#e0e0e0\"\n                    />\n                    <g\n                      id=\"Group_21\"\n                      data-name=\"Group 21\"\n                      transform=\"translate(3.348 0)\"\n                    >\n                      <path\n                        id=\"XMLID_16_\"\n                        d=\"M1.382,7.012A2.33,2.33,0,0,1,.01,5.262c-.111-1.438.7-1.953.7-3.207C.709,1,.531.452.182.165.081.082.064.054.074.031s.015-.047.17-.01a2.156,2.156,0,0,1,1.7,2c.033,1.332-.7,1.641-.807,3.087A2.849,2.849,0,0,0,1.447,6.9c.044.06.051.085.049.1S1.454,7.039,1.382,7.012Z\"\n                        transform=\"translate(0 0.666)\"\n                        fill=\"#e0e0e0\"\n                      />\n                      <path\n                        id=\"XMLID_15_\"\n                        d=\"M1.382,7.011A2.33,2.33,0,0,1,.01,5.261c-.111-1.438.7-1.953.7-3.207C.709,1,.531.451.182.163.081.082.064.054.074.031s.015-.047.17-.01a2.156,2.156,0,0,1,1.7,2c.033,1.332-.7,1.641-.807,3.087A2.849,2.849,0,0,0,1.447,6.9c.044.06.051.085.049.1S1.454,7.039,1.382,7.011Z\"\n                        transform=\"translate(3.584 0)\"\n                        fill=\"#e0e0e0\"\n                      />\n                      <path\n                        id=\"XMLID_14_\"\n                        d=\"M1.382,7.012A2.331,2.331,0,0,1,.01,5.262c-.111-1.438.7-1.953.7-3.207C.709,1,.531.452.182.165.081.082.064.054.074.031s.015-.047.17-.01a2.156,2.156,0,0,1,1.7,2c.033,1.332-.7,1.641-.807,3.087A2.849,2.849,0,0,0,1.447,6.9c.044.06.051.085.049.1S1.454,7.04,1.382,7.012Z\"\n                        transform=\"translate(6.916 0.802)\"\n                        fill=\"#e0e0e0\"\n                      />\n                    </g>\n                    <g\n                      id=\"Group_23\"\n                      data-name=\"Group 23\"\n                      transform=\"translate(1.22 7.545)\"\n                    >\n                      <ellipse\n                        id=\"Ellipse_9\"\n                        data-name=\"Ellipse 9\"\n                        cx=\"6.558\"\n                        cy=\"3.445\"\n                        rx=\"6.558\"\n                        ry=\"3.445\"\n                        transform=\"translate(0 0)\"\n                        fill=\"#90a4ae\"\n                      />\n                      <g\n                        id=\"Group_22\"\n                        data-name=\"Group 22\"\n                        transform=\"translate(0 0)\"\n                        clipPath=\"url(#clipPath)\"\n                      >\n                        <ellipse\n                          id=\"Ellipse_10\"\n                          data-name=\"Ellipse 10\"\n                          cx=\"6.558\"\n                          cy=\"3.445\"\n                          rx=\"6.558\"\n                          ry=\"3.445\"\n                          transform=\"translate(0 1.701)\"\n                          fill=\"#855c52\"\n                        />\n                      </g>\n                    </g>\n                    <path\n                      id=\"Path_31\"\n                      data-name=\"Path 31\"\n                      d=\"M1.014,7.724c-.108,0-.17,0-.175,0A.9.9,0,0,1,.955,5.928c.042,0,4.3.041,4.968-2.263a1.4,1.4,0,0,0-.047-1.218c-.168-.23-.669-.619-2.131-.651A.9.9,0,0,1,3.785,0,4.267,4.267,0,0,1,7.326,1.385a3.056,3.056,0,0,1,.322,2.782C6.66,7.541,1.982,7.724,1.014,7.724Z\"\n                      transform=\"translate(11.469 9.778)\"\n                      fill=\"#e0e0e0\"\n                    />\n                  </g>\n                  <path\n                    id=\"Path_32\"\n                    data-name=\"Path 32\"\n                    d=\"M3.275.56c.2-.024.4-.217.331-.382C3.55.041,3.35.008,3.182,0A7.059,7.059,0,0,0,.4.774C.271.836.041,1,.007,1.135A.233.233,0,0,0,.24,1.4a.984.984,0,0,0,.439-.1A8.581,8.581,0,0,1,3.275.56Z\"\n                    transform=\"translate(3.322 10.537)\"\n                    fill=\"#bcaaa4\"\n                  />\n                </g>\n              </g>\n              <g\n                id=\"Group_9\"\n                data-name=\"Group 9\"\n                transform=\"matrix(0.966, 0.259, -0.259, 0.966, 898.541, 82.719)\"\n              >\n                <g\n                  id=\"Rectangle_4-2\"\n                  data-name=\"Rectangle 4\"\n                  transform=\"translate(0 0)\"\n                  fill=\"#fff\"\n                  stroke=\"#000\"\n                  strokeWidth=\"2\"\n                >\n                  <rect width=\"29.277\" height=\"43.916\" rx=\"5\" stroke=\"none\" />\n                  <rect\n                    x=\"1\"\n                    y=\"1\"\n                    width=\"27.277\"\n                    height=\"41.916\"\n                    rx=\"4\"\n                    fill=\"none\"\n                  />\n                </g>\n                <text\n                  id=\"_\"\n                  data-name=\"?\"\n                  transform=\"translate(9.542 29.425)\"\n                  fontSize=\"19\"\n                  fontFamily=\"Quicksand-Bold, Quicksand\"\n                  fontWeight=\"700\"\n                >\n                  <tspan x=\"0\" y=\"0\">\n                    ?\n                  </tspan>\n                </text>\n              </g>\n            </g>\n          </svg>\n        </div>\n        <h1 id=\"name\">mitsumori</h1>\n      </header>\n      <main>\n        <h1 id=\"cta\">Play online scrum poker with your team</h1>\n        <div id=\"actions\">\n          <Button\n            disableElevation\n            variant=\"contained\"\n            onClick={() => setCreateRoomDialog(true)}\n          >\n            Create a room\n          </Button>\n          <Button variant=\"outlined\" onClick={() => setJoinRoomDialog(true)}>\n            Join a room\n          </Button>\n        </div>\n      </main>\n      <footer>\n        <a href=\"https://github.com/UNRULYEON/mitsumori\">\n          <img\n            src={GithubLogo}\n            id=\"footer-github-logo\"\n            alt=\"repository-of-mitsumori\"\n          />\n        </a>\n        <div className=\"footer-divider\" />\n        <Button variant=\"text\">About</Button>\n        <div className=\"footer-divider\" />\n        <Button variant=\"text\">Language</Button>\n      </footer>\n      <Dialog\n        open={createRoomDialog}\n        onClose={handleClose}\n        content={() => (\n          <>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              value={user.name}\n              onChange={(e) => {\n                localStorage.setItem(\"name\", e.target.value)\n                setUser({ ...user, name: e.target.value })\n              }}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  color=\"primary\"\n                  checked={user.is_observer}\n                  onChange={(e) => {\n                    localStorage.setItem(\n                      \"is_observer\",\n                      String(e.target.checked)\n                    )\n                    setUser({ ...user, is_observer: e.target.checked })\n                  }}\n                  name=\"I'm an observer\"\n                />\n              }\n              label=\"I'm an observer\"\n            />\n          </>\n        )}\n        actions={({ onClose }) => (\n          <>\n            <Button fullWidth onClick={onClose} variant=\"text\">\n              Cancel\n            </Button>\n            <Button\n              fullWidth\n              disableElevation\n              onClick={createRoom}\n              variant=\"contained\"\n            >\n              Create\n            </Button>\n          </>\n        )}\n      />\n      <Dialog\n        open={joinRoomDialog}\n        onClose={handleClose}\n        content={() => (\n          <>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              value={user.name}\n              onChange={(e) => {\n                localStorage.setItem(\"name\", e.target.value)\n                setUser({ ...user, name: e.target.value })\n              }}\n            />\n            <TextField\n              label=\"Room code\"\n              variant=\"outlined\"\n              value={user.room_code}\n              onChange={(e) => setUser({ ...user, room_code: e.target.value })}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  color=\"primary\"\n                  checked={user.is_observer}\n                  onChange={(e) => {\n                    localStorage.setItem(\n                      \"is_observer\",\n                      String(e.target.checked)\n                    )\n                    setUser({ ...user, is_observer: e.target.checked })\n                  }}\n                  name=\"I'm an observer\"\n                />\n              }\n              label=\"I'm an observer\"\n            />\n          </>\n        )}\n        actions={({ onClose }) => (\n          <>\n            <Button fullWidth onClick={onClose} variant=\"text\">\n              Cancel\n            </Button>\n            <Button\n              fullWidth\n              disableElevation\n              onClick={joinRoom}\n              variant=\"contained\"\n            >\n              Join\n            </Button>\n          </>\n        )}\n      />\n    </>\n  )\n}\n\nexport default Main\n","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/components/Dialog/index.tsx",[],["49","50"],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/state.ts",[],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/pages/room.tsx",["51","52","53"],"import {\n  Button,\n  Checkbox,\n  CircularProgress,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\"\nimport { useSnackbar } from \"notistack\"\nimport React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport GithubLogo from \"../img/github.png\"\nimport { DecksState, DeckState, SocketState, UsersState, UserState } from \"../state\"\nimport Dialog from \"../components/Dialog\"\nimport NotVotedIcon from '../img/NotVotedIcon'\nimport VotedIcon from '../img/VotedIcon'\nimport { getFormattedRoomCode } from '../utilities'\nimport VisibilityRoundedIcon from '@material-ui/icons/VisibilityRounded';\n\nconst Room = () => {\n  const socket = useRecoilValue(SocketState)\n  const [user, setUser] = useRecoilState(UserState)\n  const members = useRecoilValue(UsersState)\n  const deck = useRecoilValue(DeckState)\n  const decks = useRecoilValue(DecksState)\n  let { room_id }: { room_id: string } = useParams()\n\n  const [joinRoomDialog, setJoinRoomDialog] = useState<boolean>(false)\n  const [roomSettingsDialog, setRoomSettingsDialog] = useState<boolean>(false)\n\n  useEffect(() => {\n    setUser({ ...user, room_code: room_id })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (user.name === \"\") {\n      setJoinRoomDialog(true)\n    } else {\n      joinRoom()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    socket.emit('update-member', { ...user, room_code: room_id })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ user.name, user.is_observer ])\n\n  const handleClose = () => {\n    setJoinRoomDialog(false)\n    setRoomSettingsDialog(false)\n  }\n\n  const handleDeckChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    socket.emit('change-deck', { room_code: user.room_code, deck_name: event.target.value })\n  }\n\n  const joinRoom = () => {\n    socket.emit(\"join-room-no-confirmation\", { ...user, room_code: room_id })\n    setJoinRoomDialog(false)\n  }\n\n  const changeToObserver = () => {\n    setUser({ ...user, vote: '', is_observer: true })\n  }\n\n  const changeToPlayer = () => {\n    setUser({ ...user, vote: '', is_observer: false })\n  }\n\n  const castVote = (value: string) => {\n    socket.emit('cast-vote', { ...user, vote: user.vote === value ? '' : value })\n    setUser({ ...user, vote: user.vote === value ? '' : value })\n  }\n\n  const resetti = () => {\n    socket.emit('reset-round', { room_code: user.room_code })\n  }\n\n  return (\n    <div id=\"room\">\n      <div id=\"header\">\n        <div className=\"container\">\n          <span id=\"room-code-container\">Room code: {getFormattedRoomCode(room_id)}</span>\n          <div id=\"name-container\">\n            <TextField\n              fullWidth\n              size=\"small\"\n              variant=\"outlined\"\n              label=\"Name\"\n              value={user.name}\n              onChange={(e) => {\n                localStorage.setItem(\"name\", e.target.value)\n                setUser({ ...user, name: e.target.value })\n              }}\n            />\n          </div>\n          <div id=\"room-settings-container\">\n            <Button disableElevation variant=\"contained\" onClick={() => setRoomSettingsDialog(true)}>\n              Room settings\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div id=\"deck\">\n        <div className=\"container\">\n          <span id=\"deck-name-container\">Deck: {deck.name}</span>\n          <div id=\"change-kind-container\">\n            <Button\n              disableElevation\n              variant=\"contained\"\n              onClick={() => user.is_observer ? changeToPlayer() : changeToObserver()}\n            >\n              {user.is_observer ? \"Change to player\" : \"change to observer\"}\n            </Button>\n          </div>\n        </div>\n        <div className=\"deck-container-wrapper\">\n          <div className=\"deck-container\">\n            {deck.name !== \"\" ? (\n              <>\n                {user.is_observer ? (\n                  <h1 id=\"observer-text-container\">You're an observer</h1>\n                ) : (\n                  <>\n                    {deck.cards.map((card, key) => (\n                      <div\n                        className={`card-container ${\n                          card.value === user.vote ? \"voted\" : \"not-voted\"\n                        }`}\n                        onClick={() => castVote(card.value)}\n                        key={key}\n                      >\n                        {card.value}\n                      </div>\n                    ))}\n                  </>\n                )}\n              </>\n            ) : (\n              <div className=\"deck-loading\">\n                <CircularProgress />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <div id=\"members\">\n        <div className=\"container\">\n          {members.length > 1 &&\n            <div id=\"reset-button\">\n              <Button\n                disableElevation\n                onClick={() => resetti()}\n              >\n                Reset round\n              </Button>\n            </div>\n          }\n          {members.length > 1 ? (<div className=\"members-container\">\n            {members.map((member, key) => (\n              <div className=\"member-container\" key={key}>\n                <div className={`member-card ${member.is_observer ? 'observer' : 'player'} ${members.filter(x => !x.is_observer).every(m => m.vote !== '') || member.is_observer ? 'visible' :  member.vote !== '' ? 'voted' : 'not-voted'}`}>\n                  {member.is_observer\n                    ? <VisibilityRoundedIcon style={{ padding: 0, margin: 0 }}  />\n                    : members.filter(x => !x.is_observer).every(m => m.vote !== '')\n                      ? member.vote\n                      : member.vote !== ''\n                        ? <VotedIcon />\n                        : <NotVotedIcon />}\n                </div>\n                <span className=\"member-name\">{member.name}</span>\n              </div>\n            ))}\n          </div>) : (<div className=\"members-empty-state\">\n            <h1>Invite other members from your team with this link</h1>\n            <span className=\"link\">{window.location.protocol}//{window.location.hostname}{window.location.pathname}</span>\n            <h1>or tell them to go to</h1>\n            <span className=\"link\">{window.location.protocol}//{window.location.hostname}</span>\n            <h1>and enter this code</h1>\n            <span className=\"link\">{getFormattedRoomCode(room_id)}</span>\n          </div>)}\n        </div>\n      </div>\n      <footer>\n        <a href=\"https://github.com/UNRULYEON/mitsumori\">\n          <img\n            src={GithubLogo}\n            id=\"footer-github-logo\"\n            alt=\"repository-of-mitsumori\"\n          />\n        </a>\n        <div className=\"footer-divider\" />\n        <Button variant=\"text\">About</Button>\n        <div className=\"footer-divider\" />\n        <Button variant=\"text\">Language</Button>\n      </footer>\n      <Dialog\n        open={roomSettingsDialog}\n        onClose={handleClose}\n        content={() => (\n          <>\n            <FormControl variant=\"outlined\">\n              <InputLabel id=\"deck-select-outlined-label\">Decks</InputLabel>\n              <Select\n                labelId=\"deck-select-outlined-label\"\n                id=\"deck-select-outlined\"\n                value={deck.name}\n                onChange={handleDeckChange}\n                label=\"Decks\"\n              >\n                {decks.map((d, key) => (\n                  <MenuItem key={`${key}-${d.name}`} value={d.name}>{d.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </>\n        )}\n        actions={({ onClose }) => \n          <>\n            <Button\n              fullWidth\n              variant=\"text\"\n              onClick={onClose}\n            >\n              Close\n            </Button>\n          </>}\n      />\n      <Dialog\n        open={joinRoomDialog}\n        onClose={handleClose}\n        content={() => (\n          <>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              value={user.name}\n              onChange={(e) => {\n                localStorage.setItem(\"name\", e.target.value)\n                setUser({ ...user, name: e.target.value })\n              }}\n            />\n            <TextField\n              label=\"Room code\"\n              variant=\"outlined\"\n              value={user.room_code}\n              onChange={(e) => setUser({ ...user, room_code: e.target.value })}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  color=\"primary\"\n                  checked={user.is_observer}\n                  onChange={(e) => {\n                    localStorage.setItem(\n                      \"is_observer\",\n                      String(e.target.checked)\n                    )\n                    setUser({ ...user, is_observer: e.target.checked })\n                  }}\n                  name=\"I'm an observer\"\n                />\n              }\n              label=\"I'm an observer\"\n            />\n          </>\n        )}\n        actions={({ onClose }) => (\n          <>\n            <Button fullWidth onClick={onClose} variant=\"text\">\n              Cancel\n            </Button>\n            <Button\n              fullWidth\n              disableElevation\n              onClick={joinRoom}\n              variant=\"contained\"\n            >\n              Join\n            </Button>\n          </>\n        )}\n      />\n    </div>\n  )\n}\n\nexport default Room\n","/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/img/NotVotedIcon.tsx",[],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/img/VotedIcon.tsx",[],"/Users/amarkisoensingh/projects/amar.sh/mitsumori/client/src/utilities.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":19},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},{"ruleId":"58","severity":1,"message":"64","line":12,"column":10,"nodeType":"60","messageId":"61","endLine":12,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":182,"column":62,"nodeType":"67","endLine":182,"endColumn":64},{"ruleId":"65","severity":1,"message":"66","line":184,"column":62,"nodeType":"67","endLine":184,"endColumn":64},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["68"],["69"],"'useSnackbar' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","no-global-assign","no-unsafe-negation"]